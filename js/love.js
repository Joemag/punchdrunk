// Generated by CoffeeScript 1.7.1
(function() {
  var Canvas, Color, Graphics, Timer,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Color = (function() {
    function Color(r, g, b, a) {
      this.r = r;
      this.g = g;
      this.b = b;
      this.a = a != null ? a : 255;
      this.html_code = "rgb(" + this.r + ", " + this.g + ", " + this.b + ")";
    }

    return Color;

  })();

  Graphics = (function() {
    function Graphics() {
      this.getWidth = __bind(this.getWidth, this);
      this.setCanvas = __bind(this.setCanvas, this);
      this.setBackgroundColor = __bind(this.setBackgroundColor, this);
      this.setColor = __bind(this.setColor, this);
      this.newCanvas = __bind(this.newCanvas, this);
      this.rectangle = __bind(this.rectangle, this);
      this.printf = __bind(this.printf, this);
      this.print = __bind(this.print, this);
      this.polygon = __bind(this.polygon, this);
      this.point = __bind(this.point, this);
      this.line = __bind(this.line, this);
      this.draw = __bind(this.draw, this);
      this.clear = __bind(this.clear, this);
      this.circle = __bind(this.circle, this);
      this.arc = __bind(this.arc, this);
      this.canvas = new Canvas(200, 200);
      document.body.appendChild(this.canvas.element);
      this.context = this.canvas.context;
      this.default_canvas = this.canvas;
      this.default_context = this.context;
      this.setColor(255, 255, 255);
      this.setBackgroundColor(0, 0, 0);
    }

    Graphics.prototype.arc = function() {};

    Graphics.prototype.circle = function() {};

    Graphics.prototype.clear = function() {
      this.context.save();
      this.context.setTransform(1, 0, 0, 1, 0, 0);
      this.context.fillStyle = this.background_color.html_code;
      this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
      return this.context.restore();
    };

    Graphics.prototype.draw = function(drawable, x, y, r, sx, sy, ox, oy, kx, ky) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (r == null) {
        r = 0;
      }
      if (sx == null) {
        sx = 1;
      }
      if (sy == null) {
        sy = sx;
      }
      if (ox == null) {
        ox = 0;
      }
      if (oy == null) {
        oy = 0;
      }
      if (kx == null) {
        kx = 0;
      }
      if (ky == null) {
        ky = 0;
      }
      return drawable.draw(this.context, x, y, r, sx, sy, ox, oy, kx, ky);
    };

    Graphics.prototype.line = function() {};

    Graphics.prototype.point = function() {};

    Graphics.prototype.polygon = function() {};

    Graphics.prototype.print = function(str, x, y) {
      return this.context.fillText(str, x, y);
    };

    Graphics.prototype.printf = function() {};

    Graphics.prototype.rectangle = function(mode, x, y, width, height) {
      switch (mode) {
        case "fill":
          return this.context.fillRect(x, y, width, height);
        case "line":
          return this.context.strokeRect(x, y, width, height);
      }
    };

    Graphics.prototype.newCanvas = function(width, height) {
      return new Canvas(width, height);
    };

    Graphics.prototype.setColor = function(r, g, b, a) {
      if (a == null) {
        a = 255;
      }
      this.current_color = new Color(r, g, b, a);
      this.context.fillStyle = this.current_color.html_code;
      this.context.strokeStyle = this.current_color.html_code;
      return this.context.globalAlpha = this.current_color.a / 255;
    };

    Graphics.prototype.setBackgroundColor = function(r, g, b, a) {
      if (a == null) {
        a = 255;
      }
      return this.background_color = new Color(r, g, b, a);
    };

    Graphics.prototype.setCanvas = function(canvas) {
      if (canvas === void 0 || canvas === null) {
        this.canvas = this.default_canvas;
        return this.context = this.default_context;
      } else {
        canvas.copyContext(this.canvas.context);
        this.canvas = canvas;
        return this.context = canvas.context;
      }
    };

    Graphics.prototype.getWidth = function() {};

    return Graphics;

  })();

  this.Love = (function() {
    function Love() {
      this.run = __bind(this.run, this);
      this.graphics = new Graphics();
      this.timer = new Timer();
    }

    Love.prototype.run = function() {
      var game_loop;
      this.timer.step();
      this.load.call();
      game_loop = (function(_this) {
        return function() {
          _this.timer.step();
          _this.update.call(null, _this.timer.getDelta());
          _this.graphics.clear();
          _this.draw.call();
          return _this.timer.nextFrame(game_loop);
        };
      })(this);
      return this.timer.nextFrame(game_loop);
    };

    return Love;

  })();

  Timer = (function() {
    var lastTime, performance, requestAnimationFrame;

    function Timer() {
      this.step = __bind(this.step, this);
      this.sleep = __bind(this.sleep, this);
      this.getTime = __bind(this.getTime, this);
      this.getFPS = __bind(this.getFPS, this);
      this.getDelta = __bind(this.getDelta, this);
      this.nextFrame = __bind(this.nextFrame, this);
      this.microTime = performance.now();
      this.deltaTime = 0;
      this.deltaTimeLimit = 0.25;
      this.events = {};
      this.maxEventId = 0;
    }

    Timer.prototype.nextFrame = function(callback) {
      return requestAnimationFrame(callback);
    };

    Timer.prototype.getDelta = function() {
      return this.deltaTime;
    };

    Timer.prototype.getFPS = function() {
      if (this.deltaTime === 0) {
        return 0;
      } else {
        return 1 / this.deltaTime;
      }
    };

    Timer.prototype.getTime = function() {
      return this.microTime;
    };

    Timer.prototype.sleep = function() {};

    Timer.prototype.step = function() {
      var dt;
      dt = (performance.now() - this.microTime) / 1000;
      this.deltaTime = Math.max(0, Math.min(this.deltaTimeLimit, dt));
      return this.microTime += dt * 1000;
    };

    performance = window.performance || Date;

    performance.now = performance.now || performance.msNow || performance.mozNow || performance.webkitNow || Date.now;

    lastTime = 0;

    requestAnimationFrame = window.requestAnimationFrame || window.msRequestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.oRequestAnimationFrame || function(callback) {
      var currTime, delay, timeToCall;
      currTime = performance.now();
      timeToCall = Math.max(0, 16 - (currTime - lastTime));
      delay = function() {
        return callback(currTime + timeToCall);
      };
      lastTime = currTime + timeToCall;
      return setTimeout(delay, timeToCall);
    };

    return Timer;

  })();

  Canvas = (function() {
    function Canvas(width, height) {
      this.width = width;
      this.height = height;
      this.setWrap = __bind(this.setWrap, this);
      this.getWrap = __bind(this.getWrap, this);
      this.getWidth = __bind(this.getWidth, this);
      this.getPixel = __bind(this.getPixel, this);
      this.getImageData = __bind(this.getImageData, this);
      this.getHeight = __bind(this.getHeight, this);
      this.getDimensions = __bind(this.getDimensions, this);
      this.clear = __bind(this.clear, this);
      this.element = document.createElement('canvas');
      this.element.setAttribute('width', this.width);
      this.element.setAttribute('height', this.height);
      this.context = this.element.getContext('2d');
    }

    Canvas.prototype.clear = function() {};

    Canvas.prototype.getDimensions = function() {
      return [this.width, this.height];
    };

    Canvas.prototype.getHeight = function() {
      return this.height;
    };

    Canvas.prototype.getImageData = function() {};

    Canvas.prototype.getPixel = function() {};

    Canvas.prototype.getWidth = function() {
      return this.width;
    };

    Canvas.prototype.getWrap = function() {};

    Canvas.prototype.setWrap = function() {};

    Canvas.prototype.draw = function(context, x, y, r, sx, sy, ox, oy, kx, ky) {
      return context.drawImage(this.element, x, y);
    };

    Canvas.prototype.copyContext = function(context) {
      this.context.fillStyle = context.fillStyle;
      this.context.strokeStyle = context.strokeStyle;
      return this.context.globalAlpha = context.globalAlpha;
    };

    return Canvas;

  })();

}).call(this);

//# sourceMappingURL=love.map
